options {
    STATIC = false;
}

PARSER_BEGIN(Adder)
import java.io.*;

class Adder {
    static public void main(String[] args) {
        for (String arg ï¼š args) {
            try {
                System.out.println(evaluate(arg));
            } catch (ParseException ex) {
                System.err.println(ex.getMessage());
            }
        }
    }

    static public long evaluate(String src) {
        Reader reader = new StringReader(src);
        return new Adder(reader).expr()
    }
}
PARSER_END(Adder)

SKIP: { <[","\T","\R","\N"]> }

TOKEN: {
    <INTEGER: (["0"-"9"])+>
}

long expr(): 
{
    Token x, y;
}
{
    x=<INTEGER> "+" y=<INTEGER> <EOF>
        {
            return Long.parseLong(x.image) + Long.parseLong(y.image);
        }
}

TOKEN: {
    <INTEGER: ["1"-"9"] (["0"-"9"])* ("U")? ("L")?
            | "0" ["x", "X"] (["0"-"9", "a"-"f", "A"-"F"])+ ("U")? ("L")?
            | "0" (["0"-"7"])* ("U")? ("L")?
            >
}

SPECIAL_TOKEN: {
    <SPACES: ([" ","\t","\n","\t","\f"])+>
}

SPECIAL_TOKEN: {
    <LINE_COMMENT: "//" (~["\n", "\r"])* ("\n" | "\r\n" | "\r")?>
}

MORE: { <"/*"> : IN_BLOCK_COMMENT }
<IN_BLOCK_COMMENT> MORE: { <~[]> }
<IN_BLOCK_COMMENT> SPECIAL_TOKEN: { <BLOCK_COMMENT: "*/"> : DEFAULT }

MORE: { <"\""> : IN_STRING }
<IN_STRING> more: {
      <(~["\"", "\\", "\n", "\r"])+>
    | <"\\" (["0"-"7"]){3}>
    | <"\\" ~[]> 
}
<IN_STRING TOKEN: { <STRING: "\""> :DEFAULT }>

MORE: { <"'"> : IN_CHARACTER } 
<IN_CHARACTER> MORE: {
      <~["'", "\\", "\n", "\r"]>    : CHARACTER_TERM 
    | <"\\" (["0"-"7"]){3}>         : CHARACTER_TERM
    | <"\\" ~[]>                    : CHARACTER_TERM
}
<CHARACTER_TERM> TOKEN: { <CHARACTER: "'"> : DEFAULT }